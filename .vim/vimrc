" vim: fdm=marker:
" Recommended for vim >= 7; no guarantee of compatibility with earlier versions
" Lucas Oman <me@lucasoman.com>
" --enable-rubyinterp --prefix=/usr --enable-ruby
" Get latest from: http://github.com/lucasoman/Conf/raw/master/.vimrc


" load pathogen
" call pathogen#runtime_append_all_bundles()
let mapleader = ','
let g:mapleader = ','

if filewritable(expand("~/.vimrc.bundles"))
	source ~/.vimrc.bundles
endif

filetype plugin indent on
syntax on


colorscheme molokai
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
if !has("gui_running")
    set t_Co=256
    set term=screen-256color
endif
set encoding=utf-8
set langmenu=en_US.UTF-8
language message en_US.UTF-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

set cursorline
set cursorcolumn
au InsertEnter * set nocursorline
au InsertLeave * set cursorline

set laststatus=2
set colorcolumn=100


" code folding
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2

" 缩进配置
set autoindent

" tab相关
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set shiftround

" 搜索
set hlsearch
set incsearch
set ignorecase
set smartcase

" 括号匹配
set showmatch
set matchtime=2

" 行号
set number
set nowrap
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
" let h&l cross line boundaries
set whichwrap+=<,>,h,l

" Remember info about open buffers on close"
set viminfo^=%

" For regular expressions turn magic on
set magic

" 显示当前行号列号
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 在状态栏显示当前的vim模式
set showmode
" 在上下移动光标时，上下方保留的行数
set scrolloff=10

" 从剪切板复制的行为
set pastetoggle=<leader>t

" mappings
" {{{ general
" keep block highlighted when indentingst showmatch
" set matchtime=1
vmap >> >gv
vmap << <gv
" comment/uncomment highlighted block
vmap <Leader>cc :s!^!//!<CR>
vmap <Leader>cu :s!^//!!<CR>
" open local projects list file
nmap <Leader>v :vsplit .<CR>
nmap <Leader>l :split .<CR>
" use them to swap between split windows
nmap <left> <C-W>h
nmap <right> <C-W>l
nmap <up> <C-W>k
nmap <down> <C-W>j
"}}}

" 新建tab  Ctrl+t
nnoremap <C-t>     :tabnew<CR>
inoremap <C-t>     <Esc>:tabnew<CR>

" for HHKB where no up/down/left/right
inoremap <C-j>	<down>
inoremap <C-k>	<up>
inoremap <C-h>	<left>
inoremap <C-l>	<right>

nmap <C-j>	<down>
nmap <C-k>	<up>
nmap <C-h>	<left>
nmap <C-l>	<right>


" normal模式下切换到确切的tab
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>


" ==================================
" FileType Settings 文件类型设置
" ==================================
" For python"
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType ruby set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai

" 保存python文件时删除多余空格
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,java,javascrip,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
        call append(2, "\# File Name: ".expand("%"))
        call append(3, "\# Author: Jiezhong Qiu")
        call append(4, "\# Create Time: " . strftime("%Y/%m/%d %H:%M"))
        call append(5, "\# TODO:")
    endif

    normal G
    normal o
    normal o
endfunc

" C, C++, java, sh, python ... 按F10运行
map <F10> :call CompileRun()<CR>
func! CompileRun()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "!time ./%<"
        exec "!rm ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
        exec "!rm ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
        exec "!rm ./%<.class"
    elseif &filetype == 'sh'
        exec "!time bash %"
    elseif &filetype == 'python'
        exec "!time python %"
    endif
endfunc


